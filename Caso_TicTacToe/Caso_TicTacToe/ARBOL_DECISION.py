# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/147jkGP6OvjrG-zKUDPeS001LtUrJIooC
"""

#Leer datos csv
import pandas as pd
training = pd.read_csv("tic_tac_toe.csv")
training.info()
training.head(5)

#Cambiar datos a numericos
training["top-left-square"] = training["top-left-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["top-middle-square"] = training["top-middle-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["top-right-square"] = training["top-right-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["middle-left-square"] = training["middle-left-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["middle-middle-square"] = training["middle-middle-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["middle-right-square"] = training["middle-right-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["bottom-left-square"] = training["bottom-left-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["bottom-middle-square"] = training["bottom-middle-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["bottom-right-square"] = training["bottom-right-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["Class"] = training["Class"].apply(lambda toLabel: 0 if toLabel == 'positive' else 1)
training.head(5)

#Como se va trabajar
columns = ["Class","top-left-square", "top-middle-square", "top-right-square", "middle-left-square", "middle-middle-square","middle-right-square","bottom-left-square","bottom-middle-square","bottom-right-square"]
#create the variable to hold the features that the classifier will use
#datosiniciales = training[list(columns)].values
datosiniciales = training[list(columns)]
datosiniciales.head(5)

#Saber cuantos datos hay
datosiniciales.shape

#Datos de entrada
columns = ["top-left-square", "top-middle-square", "top-right-square", "middle-left-square", "middle-middle-square","middle-right-square","bottom-left-square","bottom-middle-square","bottom-right-square"]
X_input = datosiniciales[list(columns)].values

#Target el objetivo o salida deseada
y_target = datosiniciales["Class"].values

#Crear arbol de decission
from sklearn import tree

#create clf_train as a decision tree classifier object
clf_train = tree.DecisionTreeClassifier(criterion="entropy", max_depth=5)

#train the model using the fit() method of the decision tree object. 
#Supply the method with the input variable X_input and the target variable y_target
clf_train = clf_train.fit(X_input, y_target)

#Este score da las salidas requeridas
clf_train.score(X_input,y_target)

#Archivo que te ayuda a generar el arbol
import six
#from sklearn.externals.six import StringIO
with open("tic_tac_toe.dot", 'w') as f:
  f = tree.export_graphviz(clf_train, out_file=f, feature_names=columns)

!dot -Tpng ./tic_tac_toe.dot -o ./tic_tac_toe.png

from IPython.display import Image
#display the decison tree graphic
Image("tic_tac_toe.png")

respuesta = clf_train.predict([[0,0,0,0,1,1,0,1,1]])
print(respuesta)

"""MATRIZ"""

import numpy as np
from sklearn.metrics import confusion_matrix

#Leer datos csv
import pandas as pd
training = pd.read_csv("tic_tac_toe_final.csv")
training.info()
training.head(5)

#Cambiar datos a numericos
training["top-left-square"] = training["top-left-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["top-middle-square"] = training["top-middle-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["top-right-square"] = training["top-right-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["middle-left-square"] = training["middle-left-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["middle-middle-square"] = training["middle-middle-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["middle-right-square"] = training["middle-right-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["bottom-left-square"] = training["bottom-left-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["bottom-middle-square"] = training["bottom-middle-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["bottom-right-square"] = training["bottom-right-square"].apply(lambda toLabel: 0 if toLabel == 'x'  else 1 if toLabel == 'o'  else 2)
training["Class"] = training["Class"].apply(lambda toLabel: 0 if toLabel == 'positive' else 1)
training.head(5)

#Como se va trabajar
columns = ["Class","top-left-square", "top-middle-square", "top-right-square", "middle-left-square", "middle-middle-square","middle-right-square","bottom-left-square","bottom-middle-square","bottom-right-square"]
#create the variable to hold the features that the classifier will use
#datosiniciales = training[list(columns)].values
datosiniciales = training[list(columns)]
datosiniciales.head(5)

#Saber cuantos datos hay
datosiniciales.shape

#Datos de entrada
columns = ["top-left-square", "top-middle-square", "top-right-square", "middle-left-square", "middle-middle-square","middle-right-square","bottom-left-square","bottom-middle-square","bottom-right-square"]
X_input2 = datosiniciales[list(columns)].values

#Target el objetivo o salida deseada
y_target2 = datosiniciales["Class"].values

y_verd=np.array(y_target)
y_pred=np.array(y_target2)

confm=confusion_matrix(y_verd,y_pred)
print(confm)